// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Document {
  id          String   @id @default(cuid())
  content     String   @db.LongText
  title       String
  description String
  authorId    String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("documents")
}

model Company {
  id        String     @id @default(cuid())
  name      String
  Projects  Project[]
  Documents Document[]

  @@map("companies")
}

model Event {
  id              String      @id @default(cuid())
  title           String
  description     String
  start           String
  end             String
  backgroundColor String
  authorId        String
  users           UserEvent[]

  @@map("events")
}

model UserEvent {
  id      String @id @default(cuid())
  userId  String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("user_events")
}

model Project {
  id            String         @id @default(cuid())
  name          String
  abbreviation  String
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  projectBoards ProjectBoard[]
  startDate     DateTime       @default(now())
  endDate       DateTime?
  description   String?        @db.Text

  @@map("projects")
}

model ProjectBoard {
  id                  String               @id @default(cuid())
  name                String
  project             Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           String
  projectBoardColumns ProjectBoardColumn[]
  githubData          GithubData[]

  @@map("project_boards")
}

model ProjectBoardColumn {
  id                String             @id @default(cuid())
  name              String
  projectBoard      ProjectBoard       @relation(fields: [projectBoardId], references: [id], onDelete: Cascade)
  projectBoardId    String
  projectBoardTasks ProjectBoardTask[]
  orderIndex        Int

  @@unique([name, projectBoardId])
  @@map("project_board_columns")
}

model ProjectBoardTask {
  id                       String                    @id @default(cuid())
  tag                      String
  name                     String
  description              String?                   @db.Text
  projectBoardColumn       ProjectBoardColumn        @relation(fields: [projectBoardColumnId], references: [id], onDelete: Cascade)
  projectBoardColumnId     String
  createdAt                DateTime                  @default(now())
  deadLine                 DateTime?
  projectBoardTaskComments ProjectBoardTaskComment[]
  TaskPriority             TaskPriority?             @relation(fields: [taskPriorityId], references: [id])
  taskPriorityId           String?
  TaskType                 TaskType?                 @relation(fields: [taskTypeId], references: [id])
  taskTypeId               String?
  orderIndex               Int
  users                    ProjectBoardTaskUser[]

  @@map("project_board_tasks")
}

model ProjectBoardTaskComment {
  id                 String           @id @default(cuid())
  text               String           @db.Text
  authorId           String
  email              String
  projectBoardTask   ProjectBoardTask @relation(fields: [projectBoardTaskId], references: [id], onDelete: Cascade)
  projectBoardTaskId String
  createdAt          DateTime         @default(now())

  @@map("project_board_task_comments")
}

model TaskPriority {
  id                String             @id @default(cuid())
  name              String
  projectBoardTasks ProjectBoardTask[]

  @@map("task_priorities")
}

model TaskType {
  id                String             @id @default(cuid())
  name              String
  projectBoardTasks ProjectBoardTask[]

  @@map("task_types")
}

model ProjectBoardTaskUser {
  id                 String           @id @default(cuid())
  userId             String
  projectBoardTask   ProjectBoardTask @relation(fields: [projectBoardTaskId], references: [id], onDelete: Cascade)
  projectBoardTaskId String

  @@map("project_board_task_user")
}

model GithubData {
  id             String                @id @default(cuid())
  repository     String
  owner          String
  projectBoard   ProjectBoard          @relation(fields: [projectBoardId], references: [id], onDelete: Cascade)
  projectBoardId String
  githubWebhooks GithubWebhookAction[]

  @@unique([owner, repository, projectBoardId])
  @@map("github_data")
}

model GithubWebhookAction {
  id                     String                  @id @default(cuid())
  actionType             GighubWebhookActionType
  githubData             GithubData              @relation(fields: [githubDataId], references: [id], onDelete: Cascade)
  githubDataId           String
  projectBoardColumnName String

  @@unique([githubDataId, actionType])
  @@map("github_webhook_actions")
}

enum GighubWebhookActionType {
  CREATE
  PULL_REQUEST
}
